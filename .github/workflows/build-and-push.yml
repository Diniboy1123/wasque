name: Build and Push to GHCR

on:
  schedule:
    - cron: '0 16 * * *'  # Daily at 4 PM UTC
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract version from .deb metadata
        id: get_version
        run: |
          curl -fsSL https://pkg.cloudflareclient.com/dists/noble/main/binary-amd64/Packages.gz | gunzip > Packages
          VERSION=$(awk '/^Filename: / { file = $2 } /^Version: / { version = $2 } END { print version }' Packages)
          echo "VERSION=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Set lowercase repo owner
        id: vars
        run: |
          echo "OWNER_LC=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image version exists
        id: check-image
        run: |
          VERSION=${{ steps.get_version.outputs.VERSION }}
          OWNER=${{ steps.vars.outputs.OWNER_LC }}
          MANIFEST_URL="https://ghcr.io/v2/${OWNER}/wasque/manifests/${VERSION}"
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Accept: application/vnd.oci.image.manifest.v1+json" \
            "$MANIFEST_URL")
          if [ "$STATUS" -eq 200 ]; then
            echo "Image exists."
            echo "PUSH=false" >> "$GITHUB_OUTPUT"
          else
            echo "Image does not exist (status: $STATUS)."
            echo "PUSH=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Set up QEMU for cross-build
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push multi-arch image
        if: steps.check-image.outputs.PUSH == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ steps.vars.outputs.OWNER_LC }}/wasque:latest
            ghcr.io/${{ steps.vars.outputs.OWNER_LC }}/wasque:${{ steps.get_version.outputs.VERSION }}
          build-args: |
            WARP_VERSION=${{ steps.get_version.outputs.VERSION }}
